Ruby DICOM is a small and simple library for handling DICOM files (reading, editing
and writing) and DICOM network communication (both client and server side).
It is written completely in Ruby and has no external dependencies.

Copyright 2008-2010 Christoffer LervÃ¥g (chris.lervag [@nospam] @gmail.com)

INSTALLATION

gem install dicom

*************************************************************************

DOCUMENTATION


CLASS DObject

PUBLIC CLASS METHODS

  new(filename, options={})
    Initializes a new DICOM object.
    Example 1: (The simplest way)
      require 'dicom'
      obj = DICOM::DObject.new("myFile.dcm")
    Example 2: (Reading a DICOM file that has already been loaded into memory in a binary string)
      obj = DICOM::DObject.new(binary_string, :bin => true, :syntax => string_transfer_syntax)
    Example 3: (Initialize an empty DICOM object & choose non-verbose behaviour)
      obj = DICOM::DObject.new(nil, :verbose => false)

ACCESSORS (read only)
  :errors
    An array holding any error messages, warnings or notices that have been logged
    during your interaction with DObject.
  :modality
    A string which holds the description of the modality of the DICOM object that has been read.
  :parent
    An attribute shared by DObject with the different Element types. Since DObject will always be
    at the top of the chain of Element parents, this returns nil.
  :read_success
    A boolean that is true if the DICOM object was read successfully and false if not.
    Example of use:
      obj = DICOM::DObject.new("myFile.dcm")
      if obj.read_success
        puts obj.modality
      end
  :write_success
    A boolean that is true if DICOM object was written successfully to file and false if not.

PUBLIC INSTANCE METHODS
  (Note: DObject includes all methods available from the Parents module)

  encode_segments(max_size)
    Encodes the DICOM object into a series of binary string segments with a specified maximum length.
    This is mainly used internally in the library when constructing data packages for network transmission.
    Example:
      encoded_strings = obj.encode_segments(16384)

  get_image(options={})
    Returns a standard Ruby array with the pixel data, where the length of the array corresponds
    with the number of pixels in the image.
    Example 1: (Retrieve the pixel data)
      pixels = obj.get_image
    Example 2: (Retrieve the pixel data rescaled to presentation values according to window center/width settings)
      pixels = obj.get_image(:rescale => true)
    Example 3: (Retrieve the rescaled pixel data and using a numerical array in the rescaling process (~twice as fast))
      pixels = obj.get_image(:rescale => true, :narray => true)

  get_image_magick(options={})
    Returns an RMagick image.
    To call this method the RMagick bindings must have been loaded in advance (require 'RMagick').
    Example 1: (Retrieve image object, normalize the greyscale and display it on screen)
      require 'RMagick'
      image = obj.get_image_magick
      image.normalize.display
    Example 2: (Retrieve image object, rescaled to presentation values according to window center/width settings)
      image = obj.get_image_magick(:rescale => true)
    Example 3: (Retrieve rescaled image object while using a numerical array in the rescaling process (~twice as fast))
      image = obj.get_image_magick(:rescale => true, :narray => true)

  get_image_narray(options={})
    Returns a 3d NArray object where the array dimensions are related to [frames, columns, rows].
    To call this method the NArray library must have been loaded in advance (require 'narray').
    Example 1: (Retrieve numerical pixel array and display the first frame)
      require 'narray'
      require 'nimage'
      pixel_data = obj.get_image_narray
      NImage.show pixel_data[0,true,true]
    Example 2: (Retrieve numerical array, rescaled from the original pixel values to presentation values)
      pixel_data = obj.get_image_narray(:rescale => true)

  image_from_file(file)
    Reads a binary string from the specified file name/path and writes it to the Pixel Data Element in the DICOM object.
    Example:
      obj.image_from_file("my_processed_pixel_data.bin")

  image_properties
    Returns data regarding the geometrical properties of the pixel data: rows, columns & number of frames.
    Example:
      rows, columns, frames = obj.image_properties

  image_to_file(file)
    Dumps the pixel data of the DICOM object directly to the specified file name/path.
    This is useful if you wish to extract this data to process it with another program.
    Example:
      obj.image_to_file("dicom_pixel_data.bin")

  information
    Prints the key structural properties of the DICOM file to the screen.
    This information is also returned in a string array.

  remove_sequences
    Removes all sequences from the DICOM object.
    This method could be handy, if for some reason you want to simplify a DICOM file and get rid of its sequences.

  set_image(array)
    Encodes and inserts the content of your array to the pixel data element of your DICOM object.
    Note that this method does not create or update tags related to image information in the DICOM object.

  set_image_magick(image, options={})
    Encodes and inserts a RMagick image object to the pixel data element of your DICOM object.
    Note that this method does not create or update tags related to image information in the DICOM object.
    If pixel value rescaling is desired, this can be specified by using both the :max and :min options.
    NB! Because of rescaling when importing pixel values to a RMagick object, and the possible
    difference between presentation values and original pixel values, the use of set_image_magick() may
    result in pixel data that differs from what is expected.
    This method should be used with great care: Do not be suprised if your resulting DICOM image looks strange!
    Example: (Encode an image object and requesting a specific pixel value range to be encoded)
      obj.set_image_magick(my_image, :min => -2000, :max => 3000)

  set_image_narray(object, options={})
    Encodes and inserts a NArray object to the pixel data element of your DICOM object.
    Note that this method does not create or update tags related to image information in the DICOM object.
    If pixel value rescaling is desired, this can be specified by using both the :min and :max options.
    Example: (Encode a numerical pixel data array and requesting a specific pixel value range to be encoded)
      obj.set_image_narray(numerical_array, :min => -2000, :max => 3000)

  write(file)
    Writes the DICOM object to the specified file.
    Example:
      obj.write(myPath + "test_file.dcm")



MODULE Parents
  Note: All Parents methods are included in DObject, Sequence and Item.

PUBLIC INSTANCE METHODS

  [tag]
    Returns the child element, specified by a tag string.
    If the requested tag doesn't exist, nil is returned.
    NB! Only immediate children are searched. Grandchildren etc. are not included.
    Example:
      pixel_data_element = obj["7FE0,0010"]

  add(element)
    Adds a Data or Sequence Element to self (which can be either DObject or an Item)
    Example:
      obj.add(referenced_study_sequence)

  add_item(item=nil)
    Adds a specified item, or an empty item if no parameter is specified, to a Sequence Element.
    In cases of adding Encapsulated Pixel Data, a binary data item may be added to an encapsulated item.
    NB! Items are indexed by number instead of tag string. 
    Example:
      referenced_study_sequence.add_item
      new_item = referenced_study_sequence[1]

  children
    Returns all (immediate) child elements in an array (sorted by element tag), or an empty array if no children exists.
    Example:
      obj_elements = obj.children

  children?
    Returns true if the Element in question have children, false if not.

  count
    Returns the number of immediate Elements contained in this parent (does not include possible grand children).

  count_all
    Returns the total number of Elements contained in this parent (including possible grand children).

  exists?(tag)
    Returns true if an element with the tag in question is contained in this parent, and false if not.

  is_parent?
    Returns true if the element in question is a parent type element (even if it doesn't actually contain any children).

  length=(new_length)
    Manually sets the length of a Sequence or Item.

  print(options={})
    Prints the Elements contained in this Sequence/Item/DObject to the screen in a formatted, orderly fashion.
    Example 1: (Print the content of a DICOM object, but restrict the maximum length of values to 20 characters)
      obj.print(:value_max => 20)
    Example 2: (Print the content of a DICOM object to file, instead of printing it to the screen)
      obj.print(:file => true)

  remove(tag)
    Removes an element from this parent.
    Example: (Remove the pixel data from a DICOM object)
      obj.remove("7FE0,0010")

  remove_private
    Removes all private Elements from the children of this parent.
    This could be handy if you want to simplify a DICOM file by getting rid of all private Data Elements.
    Example:
      obj.remove_private

  reset_length
    Resets the length of a Sequence or Item (setting an 'undefined' length).

  value(tag)
    Returns the value of a child element of this instance, specified by a tag string.
    Note: if the specified tag is a Sequence or Item (or other parent element), an exception will be raised.
    Example:
      patient_name = obj.value("0010,0010")



MODULE Elements
  Note: All Elements methods are included in DataElement, Sequence and Item.

ACCESSORS (Read only)
  :bin
    The encoded binary (String or nil) of an Element.
  :length
    The length (Fixnum) of an Element.
  :name
    The name (String) of an Element.
  :parent
    The parent (Sequence, Item or DObject) of an Element.
  :tag
    The tag (String) of an Element.
  :value
    The formatted value (String, Fixnum, Array or nil) of an Element.
  :vr
    The Value Representation (String) of an Element.

PUBLIC INSTANCE METHODS

  parent=(new_parent)
    Sets the parent of this element to the referenced element.
    Example: (Move the Pixel Data from one DICOM object to another)
      pixel_data = obj["7FE0,0010"]
      pixel_data.parent = other_obj

  top_parent
    Returns the top parent of a particular Element. Unless an Element, or one of its parents,
    are independent (not connected to a DICOM object), the top parent will be the DObject instance.

CLASS DataElement
  (Note: DataElement includes all methods available from the Elements module)

PUBLIC CLASS METHODS

  new()

ACCESSORS (Read only)

PUBLIC INSTANCE METHODS



CLASS Sequence
  (Note: Sequence includes all methods available from the Elements and Parents modules)

PUBLIC CLASS METHODS

  new(tag, options={})
    Initializes a Sequence Element.
    Example:
      referenced_study_sequence = Sequence.new("0008,1110", :parent => obj)



CLASS Item
  (Note: Item includes all methods available from the Elements and Parents modules)

PUBLIC CLASS METHODS

  new(tag, options={})
  Initializes an Item Element.
  Example:
    my_item = Item.new("FFFE,E000", :parent => referenced_study)

PUBLIC INSTANCE METHODS

  bin=(binary)
    Sets the binary string of an (Encapsulated Pixel Data) Item.
    my_item.bin = my_jpeg_binary_string



CLASS Anonymizer

PUBLIC CLASS METHODS

  new()
    Initialize a new Anonymizer instance.
    Example:
      a = DICOM::Anonymizer.new

ACCESSORS (Read & write)
  :blank
    A boolean that you can set as true if you want all anonymization tags to be blank
    instead of having some generic value.
  :enumeration
    A boolean that if set as true will make the script set enumerated values on anonymized tags,
    such that you are able to separate the DICOM files of unique individuals after anonymization.
    Example of fictious result:
      "Joe Sixpack" => "Person1" and "Joe Schmoe" => "Person2"
  :identity_file
    If you request enumeration, you can specify an identity file which will enable you to reidentify
    the anonymized DICOM files at a later stage. The relationship between original names and
    enumerated values is stored in a text file which you can keep for yourself, while handing out
    the anonymized DICOM files to a third party.
  :remove_private
    If this accessor is set as true, all private tags in the selected DICOM files will be removed.
    This can be useful if you are unsure whether the private tags contain sensitive data or not.
  :write_path
    You may set a different path for where the anonymized DICOM files will be stored. If this
    value is not set, the Anonymizer script will overwrite the old DICOM files.
    Example:
      a.write_path = "C:/temp/"

PUBLIC INSTANCE METHODS

  add_exception(path)
    Adds a folder who's files (including all files in its subfolders) will be excluded from anonymization.

  add_folder(path)
    Adds a folder who's files (including all files in subfolders) will be anonymized.
    Example:
      a.add_folder("/home/dicom")

  add_tag(tag, options={})
    Adds a tag to the list of tags that will be anonymized. As options you can specify value to be used
    and whether the tag should be included for enumeration if this feature has been activated.
    Example:
      a.add_tag("0010,0010, :value => "MrAnonymous", :enum => true)

  change_enum(tag, status)
    Sets enumeration status for a specific tag. Status = true means the selected tag will get
    an enumerated value, false means it will not.

  change_value(tag, value)
    Changes the value used in the anonymization for a specific tag.
    Example:
      a.change_value("0008,0090", "Dr.No")

  execute(verbose)
    Executes the anonymization process. Run this method when you are finished choosing all your settings.
    Verbose (=true/false) will apply to the read/update/write process that takes place in DObject, and not
    the messages of the Anonymization script itself.

  print
    Prints the list of tags that have been selected for anonymization, along with the values
    that the original tags will be replaced with. If enumeration is selected, this method will also
    print which tags have been selected for enumeration.

  remove_tag(tag)
    Removes a tag from the list of tags that will be anonymized.
    Example:
      a.remove_tag("0010,0010")



CLASS DClient

PUBLIC CLASS METHODS

  new(host_ip, port, options={})
    Initialize a new DClient instance.
    Example:
      node = DICOM::DClient.new("10.1.25.200", 104)

ACCESSORS (Read & write)
  :ae
    Calling application entity (name of the service class user - client).
  :host_ae
    Called application entity (name of the service class provider - server).
  :host_ip
    The host (server) ip adress.
  :max_package_size
    Maximum size of transferred network packages.
  :port
    Port number to be used in the network communication.
  :timeout
    Timeout (in seconds) to be used in the network communication.
  :verbose
    Verbosity with regards to notices and error messages (true or false).
ACCESSORS (Read only)
  :command_results
    An array holding any received command results.
  :data_results
    An array holding any received data results.
  :errors
    An array holding any error messages that have occurred in this session.
  :notices
    An array holding any informational messages presented in this session.

PUBLIC INSTANCE METHODS

  find_images(options={})
    Query a server for DICOM images that matches your specified criteria.
    Accepted options:
      "0008,0018" (SOP Instance UID)
      "0008,0052" (Query/Retrieve Level)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
      "0020,0013" (Instance Number)
    Example:
      result = node.find_images("0010,0020" => patient_id, "0020,000D" => study_uid, "0020,000E" => series_uid)

  find_patients(options={})
    Query a server for patients that matches your specified criteria.
    Accepted options:
      "0008,0052" (Query/Retrieve Level)
      "0010,0010" (Patient's Name)
      "0010,0020" (Patient ID)
      "0010,0030" (Patient's Birth Date)
      "0010,0040" (Patient's Sex)
    Example:
      result = node.find_patients("0010,0010" => "James*")

  find_series(options={})
    Query a server for series that matches your specified criteria.
    Accepted options:
      "0008,0052" (Query/Retrieve Level)
      "0008,0060" (Modality)
      "0008,103E" (Series Description)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
      "0020,0011" (Series Number)
    Example:
      result = node.find_series("0010,0020" => patient_id, "0020,000D" => study_uid)

  find_studies(options={})
    Query a server for studies that matches your specified criteria.
    Accepted options:
      "0008,0020" (Study Date)
      "0008,0030" (Study Time)
      "0008,0050" (Accession Number)
      "0008,0052" (Query/Retrieve Level)
      "0008,0090" (Referring Physician's Name)
      "0008,1030" (Study Description)
      "0008,1060" (Name of Physician(s) Reading Study)
      "0010,0010" (Patient's Name)
      "0010,0020" (Patient ID)
      "0010,0030" (Patient's Birth Date)
      "0010,0040" (Patient's Sex)
      "0020,000D" (Study Instance UID)
      "0020,0010" (Study ID)
    Example:
      result = node.find_studies("0008,0020" => study_date, "0010,000D" => patient_id)

  get_image(path, options={})
    Retrieve a DICOM image file from a server (C-GET-RQ) (this method is untested (might not work)).
    Accepted options:
      "0008,0018" (SOP Instance UID)
      "0008,0052" (Query/Retrieve Level)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
    Example:
      node.get_image("/home/dicom/", "0008,0018" => sop_uid, "0020,000D" => study_uid, "0020,000E" => series_uid)

  move_image(destination, options={})
    Move an image to a dicom node other than yourself.
    Accepted options:
      "0008,0018" (SOP Instance UID)
      "0008,0052" (Query/Retrieve Level)
      "0020,000D" (Study Instance UID)
      "0020,000E" (Series Instance UID)
    Example:
      node.move_image("MYDICOM", "0008,0018" => sop_uid, "0020,000D" => study_uid, "0020,000E" => series_uid)

  move_study(destination, options={})
    Move an entire study to a dicom node other than yourself.
    Accepted options:
      "0008,0052" (Query/Retrieve Level)
      "0010,0020" (Patient ID)
      "0020,000D" (Study Instance UID)
    Example:
      node.move_study("MYDICOM", "0010,0020" => patient_id, "0020,000D" => study_uid)

  send(file_path)
    Send a DICOM file to a service class provider (SCP/PACS).
    Example:
      node.send("myFile.dcm")

  test
    Tests a connection with your DICOM server by trying a simple association.



CLASS DServer

PUBLIC CLASS METHODS

  new(port, options={})
    Initialize a new DServer instance.
    Example 1:
      server = DICOM::DServer.new(104)
    Example 2: (Initialize a DServer using a customized FileHandler placed in your local folder)
      require 'MyFileHandler'
      server = DICOM::DServer.new(104, :host_ae => "RUBY_SERVER", :file_handler => DICOM::MyFileHandler)

ACCESSORS (Read & write)
  :file_handler
    You may write your own, customized FileHandler (the file that determines how incoming DICOM files are handled),
    put it in your local execution environment, and hook it to your DServer instance by using this accessor.
    This is quite a powerful option, as it will enable you to do practically whatever you want with incoming DICOM files.
  :host_ae
    Called application entity (name of the service class provider - server).
  :max_package_size
    Maximum size of transferred network packages.
  :port
    Port number to be used in the network communication.
  :timeout
    Timeout (in seconds) to be used in the network communication.
  :verbose
    Verbosity with regards to notices and error messages (true or false).
ACCESSORS (Read only)
  :errors
    An array holding any error messages that have occurred in this session.
  :notices
    An array holding any informational messages presented in this session.

PUBLIC INSTANCE METHODS

  add_abstract_syntax(value)
    Adds a specified abstract syntax to the list of syntaxes that is accepted by the server.

  print_syntaxes
    Prints the list of abstract syntaxes that is accepted by the server.

  remove_abstract_syntax(value)
    Removes a specified abstract syntax from the list of syntaxes that is accepted by the server.

  remove_all_abstract_syntaxes
    Completely clears the list of syntaxes that the server instance will accept.

  start_scp(path)
    Launch the simple storage server (Storage Content Provider - SCP).
